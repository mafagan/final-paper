\chapter{引言}


%\begin{figure}[htbp]
%\centering
%\begin{center}
%%\includegraphics[height=1cm]{frame.pdf}
%\includegraphics[width=500pt]{frame.pdf}
%\caption{Outline of the (定义5.3)}
%\end{center}
%\end{figure}

本章首先对逻辑程序与~ASP的背景进行了介绍；然后分析总结了目前各类典型~ASP求解器的
计算方法与现阶段国内外~ASP的研究现状，从而引出本文的研究目的与意义所在；
最后对本文的组织结构安排进行了概述。

\section{研究背景}

在人工智能领域，如何能够让计算机运用已有的常识进行推理与求解计算问题是最困难的
一类难题，对这一类问题所进行的研究工作我们称之为：知识表示与形式推理。人类通过获取
知识以达到认识客观世界的目的，在一定程度上知识具有相对的正确性，但其也具有不确定性
、模糊性与不完备性~\cite{MaZ2004}。站在知识表示与形式推理的角度，需求阶段的主要工作即是完成
将获取的具有不确定性与模糊性的需求知识进行明确，同时保证其完备性与一致性。


1958年，在“人工智能之父”之一~McCarthy 的一篇题为“具有常识的程序”的论文中，首次提出
推理不同类型的知识和应用基于逻辑的语言表达~\cite{McCarthy58}；11年之后，~McCarthy 与~Hayes 共同提出
将知识表示与形式推理分离开来，分为认识论与启发式两部分~\cite{McCarthyHayes69}。很遗憾地，人们很快就
发现常识性知识~(Commonsense Knowledge)难以被经典逻辑完备地表示，典型的如~Minsky 在其论文中所讨论
的鸟类飞行问题~(Birds'~flying)~\cite{Minsky1975}：通常情况下，我们认为鸟是会飞的~(Normally,~birds~fly)。

\begin{equation}
\label{for:chap1:equation2}
\textrm{\textit{T}}  = \left\{
\begin{array}{ll}
1 & Birds ~fly. \\
2 & Tweety ~is ~a ~bird. \\
3 & Penguins ~are ~birds. \\
4 & Penguins ~do ~not ~fly.
\end{array}
\right.
\end{equation}

常识表示与形式推理的核心问题就是对缺省及其例外~(Exception)~进行推理，鸟类飞行问题即是一个典型的缺
省表示~(Default)~的例子。式~\ref{for:chap1:equation2}给出的四种形式化表示方法，用于阐述关于鸟类的飞行能力问题：


%\begin{equation}
%\label{for:chap1:equation1}
% not~ abnormal, birds~ fly.
%\end{equation}



由式~\ref{for:chap1:equation2} 中~1 与~2，能够得出结论~(a)“Tweety flies.”；但是若
将“Tweety is a penguin.”加入~\textrm{\textit{T}}中，则会得出不一致的结论。
很明显的，由~\ref{for:chap1:equation2} 中~4 与 “Tweety is a penguin.”，可以得出结论
~(b)“Tweety do not fly.”，从而与已有的结论~ (a)矛盾。


上例说明了具有非单调性~(Nonmonotonic)~的推理问题无法被经典逻辑所处理。非单调推理的思想，
是由~McCarthy 首次提出~\cite{McCarthy58},即指增加新的知识到某个系统后，可能导致原系统
能够得出的结果变得不再成立，形式化的表示为：
如果对于公式集~$T$与公式~$A,B$~，$T \vDash B$~，则~ $(T,A) \nvDash B$  ~\cite{WanH2006}。
由于经典逻辑（命题、一阶）是单调的~\cite{Lu2002}，而常识推理一般具有非单调性，因此提出非单调逻辑
的目的就是为了解决具有非单调性的推理问题。著名的非单调逻辑有：~Reiter 的缺省逻辑~(Default
logic)\cite{reiter1980}，~Hanks 的非单调模型逻辑~(Nonmonotonic modal logics)\cite{hanks1987}，
~Moore 的自认知逻辑~(Autoepistemic logic)\cite{moore1985} 和 ~McCarthy 的限定理论推理~(Circumscription)\cite{mccarthy1980,mccarthy1986}等。


随着自动定理证明和人工智能各领域知识的发展，在七十年代出现了逻辑程序的概念。由于Robinson在自动定理证明领域
提出了非常重要的消解原理~(Resolution principle)\cite{robinson1965}，之后不久~Kowalski 在此基础上首次提出
了逻辑程序设计的基本思想~\cite{kowalski1973}， ~Colmerauer等人基于该思想于1973年实现了第一个逻辑程序
设计语言~Prolog\cite{colmerauer1973}。
~Kowalski所提出的观点：算法 = 逻辑 + 控制\cite{kowalski1979}是逻辑程序设计的主要思想之一，
他认为每一个算法都应该被分为逻辑与控制两部分，其中逻辑部分刻画了算法要实现的功能，控制部分则刻画了如何实现这些功能。
基于该观点，逻辑程序设计的最终目标是：程序员只需要刻画问题是什么，即关心算法的逻辑部分，至于
算法的控制部分则留给逻辑程序的解释系统自动求解。很遗憾地是，~Prolog语言并未完全实现这一目标\cite{lloyd1987}。
尽管这个目标到目前为止尚未完全实现，但是逻辑程序领域还是有诸多的实际成果和应用。



传统的逻辑程序以霍恩~(Horn)子句作为规则，这种规则在形式上的限制导致了现实中存在的很多非确定性信息无法
被传统逻辑程序所表示。譬如，我们可能获得了一定的知识，知道了某人是印度教教徒或者是伊斯兰教教徒，但
是并不清楚其确切的信仰。在一般情况下，我们希望能够以这种形式的知识来对此人的行为作出最合理的推断。
但是很遗憾地，传统的逻辑程序明显无法进行这一类问题的推理。为了克服这一缺陷，~1982年~Minker 在传统
逻辑程序的基础上提出了在规则头部带有析取的逻辑程序，专门用以处理这类问题的推理\cite{minker1982}。



传统的逻辑程序是基于正程序的，即在程序的规则中任何形式的否定都不会出现，这样无疑使得对具体
实际问题的描述变得非常困难。由于应用的需要，否定知识的表达形式成为了一个亟待解决的问题。
一个显而易见的处理方式为：如果信息不能被证明为真，则我们就认为它为假。这便是“失败集否定”
~(Negation as failure)的概念。但是如何刻画失败集否定的语义，在八十年代成为了逻辑程序领域
的一个主要问题，在这一阶段，各种关于失败集否定的语义先后被研究者们提出：~Clark 完备概念\cite{clark1978}，
~Reiter 的闭世界假设\cite{reiter1977}，Gelfond 和~Lifschitz 的~Stable models / Answer sets semantics\cite{gelfond1988}，
Van Gelder、Ross 与 ~Schlipf 提出的良基~(Well-founded)语义\cite{van1991}。其中，Gelfond 和~Lifschitz在~1988年
提出的稳定模型语义~(Stable models semantics)，成功地利用了非单调推理领域的研究成果对失败集否定进行了
解释，同时推广到了全部的正规逻辑程序（正规意即逻辑程序的规则体中允许出现“失败集否定”）。在之后不久，稳定模型
语义再次被他们两人成功地推广到了析取逻辑程序上面\cite{gelfond1991}。



随着对逻辑程序研究的深入，稳定模型语义被不断的扩展，人们发现其不仅能够对逻辑程序中的失败集否定进行解释，
还能够与非单调推理中的很多研究密切相关，随后基于该语义的逻辑程序设计很快成为陈述性程序设计的一个重要分
支迅速地向前发展\cite{Zhang2011}，这个全新的研究领域通常被研究者们称为回答集程序设计~(Answer Set Programming,~ASP)。



\section{国内外研究现状}

回答集程序~(ASP)是一种具有稳定模型语义\cite{gelfond1988}的陈述性逻辑程序\cite{gelfond1991}。
传统的逻辑程序是使用“回答替换~(Answer substitutions)”来表示问题的解，与之不同的是回答集程序
则是使用“回答集~(Answer set)，通常情况下是由~(Answer set)求解器求解得到的。ASP求解问题的
流程为：首先使用逻辑程序以表示所计算的问题，然后用逻辑程序求解器~(ASP Slover)求解出逻辑程序的
~(Answer set),该程序的回答集即是原问题的解。~ASP是一种基于约束的编程语言，它实际上是将
逻辑程序解释成在一个或者多个文字集上的约束~\cite{WanH2006}。


近十几年，先后出现了大批的回答集~ASP求解器。由于稳定模型下传统逻辑程序的计算是~NP-complete
的，大部分的求解器一般都是通过搜索的方法求得回答集。目前典型的传统逻辑程序的~ASP求解器主要分为
两类：一类是基于~DPLL 算法的，包括：DLV\footnote{http://www.dbai.tuwien.ac.at/proj/dlv/}，
smodels\footnote{http://www.tcs.hut.fi/Software/smodels}，clasp\footnote{http://www.cs.uni-potsdam.de/clasp/}；
另一类是基于~SAT求解算法的，包括：
ASSAT\footnote{http://assat.cs.ust.hk}，cmodels\footnote{http://www.cs.utexas.edu/users/tag/cmodels.html}。
其中，ASSAT与cmodels 的算法思想都是源自于~Lin and Zhao在~2004年所发表的论文
中的工作\cite{lin2004}，两者通过各自不同的算法将环公式添加到逻辑程序中，然后利用~SAT求解器
求解相应的命题逻辑公式的模型，借以得到原逻辑程序的回答集，相比之下，cmodels效率更高一些。clasp
求解器采用的是冲突驱动子句学习策略~(conflict-driven clause learning)与冲突驱动的回溯算法
~(conflict-driven backtracking)，该算法其实是DPLL算法的一种变形，也是现阶段被用以实现~SAT
求解器的一种主流技术。smodels的算法结构与~DLV十分类似，DLV求解器的实现目的主要是为了
求解带析取的逻辑程序，因此其内部实现针对析取逻辑程序在一定程度上做了一些调整，略微区别于
~smodels\cite{Ji2011}。


典型的析取逻辑程序~(DLP)求解器主要有：claspD\cite{drescher2008}，
DLV\cite{leone2006}，GnT\cite{janhunen2006}，如表\ref{chap1:table1}所示。其中，claspD是
在clasp的基础上扩展开发的。
~Janhunen等人在~smodels的基础上开发了GnT求解器，Gnt内部实际上即是通过调用smodels来对
析取逻辑程序进行求解，其算法思想是先将带析取的逻辑程序翻译为传统逻辑程序~(即不带析取)，
然后调用smodels求解得出其可能的回答集，最后再调用smodels来剔除不满足析取逻辑程序回答集要求的解。

\begin{table}
\wuhao
\caption{主要的析取逻辑程序求解器}
    \label{chap1:table1}
    \centering
    %\begin{tabular}{|c|c|c|c|c|c|c|}
    \tabcolsep0.2in
    \renewcommand\arraystretch{1.5}
    \begin{tabular}{p{0.5cm}|p{4.5cm}|p{5.5cm}}
        \hline
        \multicolumn{1}{c|}{DLP求解器} & \multicolumn{1}{c|}{研发组织} & \multicolumn{1}{c}{访问网址} \\
        \hline
        claspD & Torstrn Schaub教授.  University of Potsdam(德国) & http://www.cs.uni-potsdam.de/claspD/ \\
        \hline
        DLV & Thomas Eiter教授.  Vienna University of Technology(奥地利) & http://dbai.tuwien.ac.at/proj/dlv/  \\
        \hline
        GnT & TCS实验室.  Helsinki University of Technology(芬兰) & http://www.tcs.hut.fi/Software/gnt/  \\
        \hline
    \end{tabular}
\end{table}


高效的回答集求解器的产生极大地推动了回答集逻辑程序~(ASP)的研究，并发展出~(ASP)程序设计。
目前每年都有许多相关的论文在人工智能和知识表示的权威国际会议（如~IJCAI，AAAI和~KR）上发表。
自~2001年开始就有专门的关于~ASP理论和应用的会议召开，在~2007年~LPNMR会议正式设置了
两年一度的~ASP求解器竞赛，~2013年第四届~ASP求解器竞赛目前正在进行中，这些
会议与竞赛也在一定程度上促进了~ASP的快速发展。


一方面，~ASP~(或~DLP)提供了与推理机制无关的说明性语义\cite{gelfond1988,lifschitz2002}；另一方面，各
种高效的~(ASP)求解器不断的被提出与实现，ASP被越来越多的研究者们作为知识表示与形式推理的一个重要工具，
用以实现非单调逻辑的推理，并且被应用到各个实际领域。University of Texas at Austin的~Action
~Group在~2001年成功获得~NASA的支持，将~ASP应用于航天飞行决策支持系统的设计\cite{nogueira2001,balduccini2001}；
~Soininen等人则使用~ASP为程序配置\cite{soininen1998}提供决策支持；~Baral等人在~2004年将
~ASP应用于解决生物信息学的问题\cite{baral2004}；~Brooks等人则将语言学\cite{brooks2005}中的计算问题
运用~ASP成功进行处理等。Torsten教授全面地综述了~ASP的应用\footnote{http://www.cs.uni-potsdam.de/$\sim$torsten/asp/asp.html}，
现阶段他正致力于将求解器~claspD应用于基因组测试问题。

在国内，近几年国家自然科学基金对稳定模型~(Stable models)或回答集逻辑程序~(ASP)研究
的支持也呈现逐年上升趋势，近几年的资助项目如表\ref{chap1:table2}所示。

\begin{table}
\wuhao
\caption{主要的析取逻辑程序求解器}
    \label{chap1:table2}
    \centering
    %\begin{tabular}{|c|c|c|c|c|c|c|}
    %\tabcolsep0.2in
    %\renewcommand\arraystretch{1.5}
    \begin{tabular}{p{4.5cm}|p{5.5cm}}
        \hline
        \multicolumn{1}{c|}{项目名称（按时间先后排序）} & \multicolumn{1}{c|}{项目信息}   \\
        \hline
        claspD & Torstrn Schaub教授.  University of Potsdam(德国)  \\
        \hline
        DLV & Thomas Eiter教授.  Vienna University of Technology(奥地利)   \\
        \hline
        GnT & TCS实验室.  Helsinki University of Technology(芬兰)   \\
        \hline
    \end{tabular}
\end{table}

\begin{table}
  \centering
  \caption{}\label{}
\end{table}


aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa



本章主要介绍多种已有的~\golog~解释器，以三个不同方面进行对比和分析；
并总结了目前的~\golog~解释器的局限性和有待改进方面，
从而引出本文研究动机和工作；最后对本文整体结构安排进行概述。

\section{~\golog~解释器概述}

情景演算~\cite{Rei01}~是一门用于动态变化世界表示和动作推理的语言。
情景演算可以方便完整地表示出关于世界的客观知识和机器人的主观知识，
并以基本动作理论描述促使世界的状态发生变化的原子动作（primitive action）。
同时，利用情景演算中情景（situation）与流（fluent）的概念，
我们能够正确地完成动作推理的任务。
因此，该语言很好地适用于机器人的知识表示与推理。

在机器人的动作规划中，除了基本动作理论，
我们希望加入高级而复杂的机器人控制信息，
使得机器人的规划符合特定要求或规划过程加快。
基于情景演算，~Levesque~等人提出的~\golog~语言~\cite{LRL97}~提供了一种有效的解决方案。
该语言提供了多种基本程序结构，能够方便地构造出复杂的高级程序。
因此，我们可以利用~\golog~语言根据控制信息构造高级控制程序，嵌入到情景演算中，
从而使机器人能够根据控制程序合理地规划动作。

基于情景演算的~\golog~语言，为机器人控制提供了简单而丰富的构造结构，
能表现高级的智能化的控制信息，为情景演算的动作控制打下了良好的基础。
因此后继研究者关于情景演算方面的研究，主要都是以~\golog~语言作为基本，
并根据不同的应用领域需求，而产生了众多~\golog~的扩展版本。

目前，已经有很多解释器实现了~\golog~语言及其扩展版本，
例如原生的~\golog~解释器~\cite{LRL97}~，
及其扩展版本
~\congolog~解释器~\cite{GLL00}~，
~\indigolog~解释器~\cite{GLS01}~，
~\sgolog~解释器~\cite{Lak99}~，
和基于主观逻辑（~\sll~）的~\golog~解释器~\cite{CL09}~等等。

这些解释器各自具有不同的特点，以下将以三个不同的方面对这些解释器进行比较。

\subsection{知识处理能力}

在情景演算中，机器人的知识包括关于动作理论的知识和关于世界的知识。
关于动作理论的知识一般都是基于一阶的知识，
而现在我们主要讨论关于世界的知识的处理能力，
在不同解释器上的差异性。

原生的~\golog~解释器是基于“封闭世界假设”（closed-world assumption, CWA）~\cite{LRL97}~，即具有关于世界的完备的客观知识。
基于该假设，知识库只表示原子命题形式，
并根据“推演失败即否定”（negation-as-failure, NAF），
以知识库搜索的方式进行一阶公式的推理。
在~CWA~下，这种推理的正确性很容易得到保证；
然而因为满足该假设的条件过于苛刻，
在大部分应用领域中关于世界的客观知识都是不完备的，
所以该假设并非能广泛适用。

~Levesque~等人提出的~\indigolog~解释器
则基于“及时性假设”（just-in-time assumption, JIT）~\cite{GLS01}~，
该假设与控制程序相关联，指在不同情景根据程序进行公式查询时，
关于该查询具有完备的客观知识，即能成功判定公式的真值。
该假设可被认为是~CWA~的动态版本――“动态封闭世界假设”
（dynamic closed-world assumption, DCWA）。
对比~CWA~，它的满足条件已被适度弱化，因此具有更广的适用性。
尽管如此，对于众多基于不完备知识的应用领域，~JIT~还是难以满足的。

上述两种解释器都是对世界的客观知识（objective knowledge）进行处理，
分别要求以较高程度的知识完备性来保证推理能力的正确性。

~Reiter~提出了基于机器人的主观知识（subjective knowledge）的~\golog~解释器~\cite{Rei01a}~，
在知识不完备条件下，
其推理能力的正确性并不需要依赖于关于知识完备性的假设。
因此，该解释器能支持较为广泛的基于不完备知识的应用领域。

但目前绝大部分的解释器，包括以上三种，
它们的推理能力的正确性还都要依赖于“领域封闭假设”（domain closure assumption, DCA），即关于所有个体的信息是完备的。
基于该假设，它们把一阶推理问题简化为命题的推理问题。
上述的假设，~CWA~，~JIT~（~DCWA~）和~DCA~，
在真实世界的应用领域中，都是不尽合理的。
另一方面，它们都是基于原子命题或文字这类确定性知识的形式进行表示和推理，
而对于非确定性知识，如析取知识和存在性知识的处理则无能为力。
可见，目前绝大部分解释器都只提供有限的一阶知识处理能力。
而在真实世界的应用领域中，如~Wumpus~世界和无穷多个体的积木世界，
对析取知识和不完备个体域的处理则显得尤为重要。

于是~Levesque~在1998年提出~\proper~知识库~\cite{L98}~，
可以表示无穷多个体域和一阶文字知识，但仍不能表示析取知识。
而在2002年~Lakemeyer~和~Levesque~扩展了~\proper~知识库的表达能力，
提出了~\properplus~知识库~\cite{LL02}~，能够表示一阶析取子句知识。
该知识库等价于一个具有可能无穷多个实例化析取子句的集合。
它在目前绝大部分的应用领域中，都具有足够的表达能力。

~Liu~等人在2004年提出了基于受限信念（limited belief）的主观逻辑（~\sll~）
~\cite{LLL04}~。
~\sll~处理两类析取知识，一种是表示规则的霍恩子句（Horn clauses），
另一种是表示不完备知识的的析取子句（clauses）。
对于前者，~\sll~采用单元归结（unit propagation）进行推理，
而对于后者，则采用受限的分情况讨论（case analysis）的方式进行推理。
他们证明了在~\properplus~知识库上基于~\sll~的推理是可判定的，
并给出其完整的推理过程，
提供了在~\properplus~知识库上进行推理的可行性。
而事实上~Cla{\ss}en~和~Lakemeyer~也在2009年提出了
一种基于~\sll~的~\golog~解释器~\cite{CL09}~。

\subsection{回归与演进方式}

在任何的~\golog~的解释器中，查询模块都是非常关键的一个构成部分，
这个模块用于解决预测问题：判定一个公式在一系列动作被执行后是否成立。
换句话说，就是在包括初始情景在内的，任意一个可达情景中，
判定一个公式是否在该情景中成立。

而目前解决预测问题的方法分为回归（regression）和演进（progression）两种
~\cite{Rei01}~。
回归是指，利用情景参数把公式转换到在初始情景下等价的新公式，
然后在初始情景对应的知识库中查询新公式是否成立。
而演进是指，把知识库从初始情景根据已执行的动作序列更新到查询对应的情景，
然后在该情景对应的知识库中查询公式是否成立。

回归可以利用情景演算中流的后继状态公理来实现，
目前的解释器主要都是基于回归的方式，
例如原生的和基于知识的~\golog~解释器，~\indigolog~解释器，~\sgolog~解释器
和基于~\sll~的~\golog~解释器等等。
然而，一旦查询对应的情景是从初始情景执行长串动作序列演变而来，
回归的方式就显得特别累赘而难以处理：
转换所得的等价的新公式的长度在最坏情况下会根据动作序列长度发生指数级增长，
这将让推理机不堪重负。
尽管在实现公式转换时上可以采用动态化简的方式来有效降低公式长度，
但是在这个过程中，随着动作的执行增加而使得对局部公式重复查询的问题依然存在。
所以，最后不能避免的关于回归方式的缺点在于，
公式查询的效率会随着动作执行的长度增加而降低。

演进的方式并不需要对公式进行转换，所以能够避免回归方式引起的查询效率问题。
演进的语义定义是~Lin~和~Reiter~在1997年提出的~\cite{LR97}~，
他们证明了演进是二阶定义的，并提出了一种一阶定义的~FO~（first-order）演进。
但他们怀疑~FO~演进并不是完备演进，即可能会丢失信息。
而~Petrick~和~Bacchus~提出的基于不完备信息的，
带有感知动作的动作规划器~PKS~系统~\cite{PB02}~
实现了不完备信息情形下的演进，
但这种演进并不是完备的，只是近似演进，有可能会丢失信息。

而近年来基于演进方式的研究工作有了较大的推进。
在2008年~Vassos~和~Levesque~~\cite{VL08}~证明了~FO~演进确实是不完备的，
但又同时指出，在很多情况下~FO~演进并不会丢失信息。
同一年~Vassos~等人~\cite{VLL08}~把注意力放到一类动作子类局部效果动作（local-effect actions）上。
局部效果动作的直观含义是~\cite{LL09}~，
如果一个动作~$A(\vec{c})$~改变了流~$F(\vec{d},s)$~的真值，
那么~$\vec{d}$~一定包含在~$\vec{c}$~中，
即被改变的流的参数一定在动作的参数里。
他们利用一阶逻辑的紧致性定理（compactness theorem）证明了
针对局部效果动作中的某一子类的演进是一阶可定义的，并给出了相应的算法。
而~Liu~和~Lakemeyer~~\cite{LL09}~在2009年利用遗忘(forgetting)的概念证明了
针对完整的局部效果动作的演进的一阶可定义性，并给出了有效的演进的算法。

\subsection{离线与在线执行}

~\golog~解释器根据语义类型可以分为三种：离线（offline），
在线（online）和两者的结合。所谓离线，是指机器人根据控制程序，
预先规划好整一套动作序列，然后再去执行。而在线则是指，
机器人每次根据程序只执行单个合法的原子动作，然后以剩余程序进行迭代，
直到程序结束为止。

基于封闭世界假设的原生~\golog~解释器是采用离线语义，
以完备的知识去规划整一套动作序列。
在知识不完备的情形下，很多解释器引入了感知动作（sensing action），
用于未知知识的获取。在引入感知动作的解释器中，
~Reiter~的基于知识的~\golog~解释器~\cite{Rei01a}~和~\congolog~解释器~\cite{GLL00}~
是采用在线语义的，每次迭代只查找下一步合法（符合程序）动作执行；
而~Lakemeyer~提出的~\sgolog~解释器~\cite{Lak99}~则是采用离线语义，
它支持感知动作，根据用户设定分支记号~$branch\_on(\phi)$~对感知结果~$\phi$~进行分支，
从而规划出一套动作树。

离线语义的优点在于规划得到的一整套动作序列（树），能保证符合控制程序要求，
因而必然能够完全执行成功；但由于规划的解空间与程序长度和深度成正比，
规划任务一般比较沉重，规划效率相应比较低。
而在线语义弥补了离线语义的缺点，它根据程序运行只计算单步合法动作，
动作规划任务因此变得很轻松；但在非确定性动作选择上具有随机性，
并不能保证程序能成功运行到结束。

~\indigolog~解释器~\cite{GLS01}~结合了离线与在线语义，
它提出了~\search~算子，允许程序编写者通过调用该算子，
在在线执行过程中对局部子程序进行离线规划，从而保证子程序的成功运行，
而其余未进行离线规划的子程序则由程序编写者去保证其在线执行的正确性即可。
这种离线与在线结合的方式，融合了双方的优点，
能够使大规划任务划分为若干小任务，有效降低了规划的复杂度，
同时又保证了程序运行的成功，并且使程序编写的灵活度有了极大的提高，
是一种良好的折中方案。

然而，~\indigolog~解释器离线规划程序输出的是动作序列，
并需要及时性假设，即动态封闭世界假设，来保证其规划的正确性。
尽管~\indigolog~解释器后来结合了~\sgolog~解释器的分支规划~\cite{S01}~，
但仍然需要用户设定分支记号才会进行分支规划，未能提供一种自动分支规划的标准化方法。

另一方面，由于目前的~\golog~的解释器都只提供一般性的规划，
没有加入专业规划器的启发式搜索技术，
在离线规划时效率水平存在明显不足，
在稍大规模应用领域中，如Wumpus世界，
进行动作规划耗时甚巨。
为了提高解释器离线规划的效率，
已经有一些研究者把~\golog~的动作规划和一般规划问题结合起来。
~Cla{\ss}en~等人~\cite{CELN07}~把~ADL~规划问题映射到~\golog~的一个变体~\es~~\cite{LL04}~上，
并以同一规划任务就以~ADL~形式调用~\ff~规划器~\cite{HN01}~进行规划和在~\es~上的一般性规划两者的性能进行对比。
~Baier~等人~\cite{BFM07}~提出了一套算法，把~\golog~形式的控制程序编译到对应的规划实例中去，
再利用成熟的规划器如~\ff~规划器（及其扩展版本~\conformantff~~\cite{HB04}~
和~\contingentff~~\cite{Hof05}~）规划出动作序列。这种方法能有效提高动作规划的效率。

\section{本文动机与工作}

总结上述三方面我们可知，在不完备知识情形下，目前已有的~\golog~解释器：
在处理一阶知识上能力不足，并需要一定程度知识完备性和个体域完备性来保证其推理的正确性；
处理预测问题大多数是采用回归方式，存在查询效率随动作执行增加而降低的问题，
而另外的少数则采用不完备演进方式，存在信息丢失的可能；
采用离线与在线相结合的执行方式是合理的，但离线规划的局限性较大，
规划动作的效率存在明显不足。

因此，本文提出一种在不完备信息条件下，基于知识的~\golog~一阶方言
~\lbgolog~（Limited-Belief-based ~\golog~），
它带有感知动作，采用完备演进和受限推理。
并且本文实现了~\lbgolog~解释器，
其中知识库采用~\properplus~知识库形式，处理无穷多个体和一阶析取子句知识；
基于~Liu~等人提出的~\cite{LLL04}~主观逻辑~\sll~，对~\properplus~知识库进行受限推理；
针对局部效果动作进行完备演进。

解释器采用离线与在线方式相结合的方式：
以在线执行方式作为主体，
利用单步动作执行的时间进行知识库的演进；
并同时提供两个离线算子针对不同情形对程序进行动作规划。
其中，在知识不完备条件下，~\search~算子
根据感知动作的出现自动以感知结果作为分支的规划树；
在局部封闭世界信息成立的条件下，~\planning~算子通过基本动作理论和程序生成规划实例，
然后调用成熟的规划器求解动作序列。

本文给出了解释器实现的可靠性和完备性定理及其相关证明，
并在若干应用领域进行了实验，
如积木世界，~Unix domain~，服务机器人，~Wumpus~世界等，
展示了~\lbgolog~解释器的可行性和良好的执行效率。

\section{本文结构安排}

本文先介绍了目前~\golog~的解释器的发展状况，和与本文相关的知识概念和工作；
然后详细阐述了本文提出的~\lbgolog~的语法和语义，并描述了其解释器的具体实现；
最后展示实验数据，并对本文进行总结。

本人组织论文结构如下：
本章，主要介绍了基于~\golog~的解释器的发展与研究现状，以及本文的研究动机和工作概述；
第二章，介绍了与本文相关的预备知识，包括其形式化和概略介绍；
第三章，阐述了本文提出的~\lbgolog~的语法结构及其语义定义；
第四章，描述了~\lbgolog~解释器的具体实现，并证明了实现的正确性；
第五章，给出了~\lbgolog~解释器在两个应用领域上的实验结果及对应的分析；
第六章，对本文工作进行总结，并提出进一步的研究思路。 